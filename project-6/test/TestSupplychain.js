// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1
  var upc = 1
  const originFarmerID = accounts[1]
  const originFarmName = "John Doe"
  const originFarmInformation = "Yarray Valley"
  const originFarmLatitude = "-38.239770"
  const originFarmLongitude = "144.341490"
  var productID = upc * 2 ** 128 + sku
  const productNotes = "Best beans for Espresso"
  const productPrice = web3.utils.toWei("1", "ether")
  var itemState = 0
  const distributorID = accounts[2]
  const retailerID = accounts[3]
  const consumerID = accounts[4]
  const anyone = accounts[5]
  const emptyAddress = '0x0000000000000000000000000000000000000000'

  const expected = [
    sku, upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude,
  ]

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...")
  console.log("Contract Owner: accounts[0] ", accounts[0])
  console.log("Farmer: accounts[1] ", accounts[1])
  console.log("Distributor: accounts[2] ", accounts[2])
  console.log("Retailer: accounts[3] ", accounts[3])
  console.log("Consumer: accounts[4] ", accounts[4])

  before(async () => {
    // Deploy the smart contract
    this.supplyChain = await SupplyChain.deployed()
    await this.supplyChain.addFarmer(originFarmerID)
    await this.supplyChain.addDistributor(distributorID)
    await this.supplyChain.addRetailer(retailerID)
    await this.supplyChain.addConsumer(consumerID)
  })

  const assertResultBufferOne = (result, expected) => {
    assert.equal(result[0], expected[0], 'Error: Invalid item SKU')
    assert.equal(result[1], expected[1], 'Error: Invalid item UPC')
    assert.equal(result[2], expected[2], 'Error: Missing or Invalid ownerID')
    assert.equal(result[3], expected[3], 'Error: Missing or Invalid originFarmerID')
    assert.equal(result[4], expected[4], 'Error: Missing or Invalid originFarmName')
    assert.equal(result[5], expected[5], 'Error: Missing or Invalid originFarmInformation')
    assert.equal(result[6], expected[6], 'Error: Missing or Invalid originFarmLatitude')
    assert.equal(result[7], expected[7], 'Error: Missing or Invalid originFarmLongitude')
  }

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {

    // Mark an item as Harvested by calling function harvestItem()
    const result = await this.supplyChain.harvestItem(
      upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes,
      { from: originFarmerID }
    )

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, originFarmerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], 0, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Harvested', 'Error: Invalid event name')
  })

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {

    // Mark an item as Processed by calling function processtItem()
    const result = await this.supplyChain.processItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, originFarmerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], 0, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Processed', 'Error: Invalid event name')
  })

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {

    // Mark an item as Packed by calling function packItem()
    const result = await this.supplyChain.packItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, originFarmerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], 0, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Packed', 'Error: Invalid event name')
  })

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {

    // Mark an item as ForSale by calling function sellItem()
    const result = await this.supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, originFarmerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'ForSale', 'Error: Invalid event name')
  })

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {

    // Mark an item as Sold by calling function buyItem()
    const result = await this.supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, distributorID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Sold', 'Error: Invalid event name')
  })

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {

    // Mark an item as Sold by calling function buyItem()
    const result = await this.supplyChain.shipItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, distributorID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Shipped', 'Error: Invalid event name')
  })

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {

    // Mark an item as Sold by calling function buyItem()
    const result = await this.supplyChain.receiveItem(upc, { from: retailerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, retailerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Received', 'Error: Invalid event name')
  })

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {

    // Mark an item as Sold by calling function buyItem()
    const result = await this.supplyChain.purchaseItem(upc, { from: consumerID, value: productPrice })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assertResultBufferOne(resultBufferOne, [
      sku, upc, consumerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
    assert.equal(result.logs[0].event, 'Purchased', 'Error: Invalid event name')
  })

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await this.supplyChain.fetchItemBufferOne.call(upc, { from: anyone })

    // Verify the result set:
    assertResultBufferOne(resultBufferOne, [
      sku, upc, consumerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude
    ])
  })

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await this.supplyChain.fetchItemBufferTwo.call(upc, { from: anyone })

    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
    assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
  })

});

